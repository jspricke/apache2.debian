From: Stephen Farrell <stephen.farrell@cs.tcd.ie>
Date: Fri, 24 Nov 2023 14:58:53 +0000
Subject: remove old _ESNI hangover code

---
 modules/ssl/ssl_engine_init.c | 39 ---------------------------------------
 modules/ssl/ssl_engine_log.c  |  4 ----
 2 files changed, 43 deletions(-)

diff --git a/modules/ssl/ssl_engine_init.c b/modules/ssl/ssl_engine_init.c
index eb6e1e8..02de652 100644
--- a/modules/ssl/ssl_engine_init.c
+++ b/modules/ssl/ssl_engine_init.c
@@ -1090,29 +1090,6 @@ static apr_status_t ssl_init_ctx_verify(server_rec *s,
         ap_log_error(APLOG_MARK, APLOG_TRACE1, 0, s,
                      "Configuring client authentication");
 
-#ifdef HAVE_OPENSSL_ESNI
-
-        if (!SSL_CTX_load_verify_file(ctx,
-                                           mctx->auth.ca_cert_file))
-        {
-            ap_log_error(APLOG_MARK, APLOG_EMERG, 0, s, APLOGNO(10234)
-                    "Unable to configure verify CA file "
-                    "for client authentication");
-            ssl_log_ssl_error(SSLLOG_MARK, APLOG_EMERG, s);
-            return ssl_die(s);
-        }
-
-        if (!SSL_CTX_load_verify_dir(ctx,
-                                           mctx->auth.ca_cert_path))
-        {
-            ap_log_error(APLOG_MARK, APLOG_EMERG, 0, s, APLOGNO(10235)
-                    "Unable to configure verify CA dir "
-                    "for client authentication");
-            ssl_log_ssl_error(SSLLOG_MARK, APLOG_EMERG, s);
-            return ssl_die(s);
-        }
-
-#else
         if (!modssl_CTX_load_verify_locations(ctx, mctx->auth.ca_cert_file,
                                                    mctx->auth.ca_cert_path)) {
 
@@ -1123,8 +1100,6 @@ static apr_status_t ssl_init_ctx_verify(server_rec *s,
             return ssl_die(s);
         }
 
-#endif
-
         if (mctx->pks && (mctx->pks->ca_name_file || mctx->pks->ca_name_path)) {
             ca_list = ssl_init_FindCAList(s, ptemp,
                                           mctx->pks->ca_name_file,
@@ -1257,15 +1232,6 @@ static apr_status_t ssl_init_ctx_crl(server_rec *s,
     ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, s, APLOGNO(01900)
                  "Configuring certificate revocation facility");
 
-#ifdef HAVE_OPENSSL_ESNI
-    if (!store || !X509_STORE_load_file(store, mctx->crl_file)) {
-        ap_log_error(APLOG_MARK, APLOG_EMERG, 0, s, APLOGNO(10236)
-                     "Host %s: unable to configure X.509 CRL storage "
-                     "for certificate revocation", mctx->sc->vhost_id);
-        ssl_log_ssl_error(SSLLOG_MARK, APLOG_EMERG, s);
-        return ssl_die(s);
-    }
-#else
     if (!store || !modssl_X509_STORE_load_locations(store, mctx->crl_file,
                                                            mctx->crl_path)) {
         ap_log_error(APLOG_MARK, APLOG_EMERG, 0, s, APLOGNO(01901)
@@ -1274,7 +1240,6 @@ static apr_status_t ssl_init_ctx_crl(server_rec *s,
         ssl_log_ssl_error(SSLLOG_MARK, APLOG_EMERG, s);
         return ssl_die(s);
     }
-#endif
 
     switch (crl_check_mode) {
        case SSL_CRLCHECK_LEAF:
@@ -1955,11 +1920,7 @@ static apr_status_t ssl_init_proxy_certs(server_rec *s,
         return ssl_die(s);
     }
 
-#ifdef HAVE_OPENSSL_ESNI
-    X509_STORE_load_file(store, pkp->ca_cert_file);
-#else
     modssl_X509_STORE_load_locations(store, pkp->ca_cert_file, NULL);
-#endif
 
     for (n = 0; n < ncerts; n++) {
         int i;
diff --git a/modules/ssl/ssl_engine_log.c b/modules/ssl/ssl_engine_log.c
index 1d2c63d..3b3ceac 100644
--- a/modules/ssl/ssl_engine_log.c
+++ b/modules/ssl/ssl_engine_log.c
@@ -97,11 +97,7 @@ void ssl_log_ssl_error(const char *file, int line, int level, server_rec *s)
     const char *data;
     int flags;
 
-#ifdef HAVE_OPENSSL_ESNI
-    while ((e=ERR_peek_last_error_data(&data, &flags))) {
-#else
     while ((e = modssl_ERR_peek_error_data(&data, &flags))) {
-#endif
         const char *annotation;
         char err[256];
 
