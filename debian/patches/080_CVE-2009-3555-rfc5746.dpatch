#! /bin/sh /usr/share/dpatch/dpatch-run
# Description: Add support for SSLInsecureRenegotiation directive
# Origin: upstream, http://svn.apache.org/viewvc?view=revision&revision=917044

@DPATCH@
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/mod_ssl.c lenny-apache2/modules/ssl/mod_ssl.c
--- lenny-apache2~/modules/ssl/mod_ssl.c	2010-11-15 22:45:54.000000000 +0100
+++ lenny-apache2/modules/ssl/mod_ssl.c	2010-11-15 23:14:11.411204883 +0100
@@ -143,6 +143,8 @@
                 "(`[+-][SSLv2|SSLv3|TLSv1] ...' - see manual)")
     SSL_CMD_SRV(HonorCipherOrder, FLAG,
                 "Use the server's cipher ordering preference")
+    SSL_CMD_SRV(InsecureRenegotiation, FLAG,
+                "Enable support for insecure renegotiation")
     SSL_CMD_ALL(UserName, TAKE1,
                 "Set user name to SSL variable value")
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/ssl_engine_config.c lenny-apache2/modules/ssl/ssl_engine_config.c
--- lenny-apache2~/modules/ssl/ssl_engine_config.c	2010-11-15 22:45:54.000000000 +0100
+++ lenny-apache2/modules/ssl/ssl_engine_config.c	2010-11-15 23:14:11.411204883 +0100
@@ -169,6 +169,7 @@
     sc->vhost_id_len           = 0;     /* set during module init */
     sc->session_cache_timeout  = UNSET;
     sc->cipher_server_pref     = UNSET;
+    sc->insecure_reneg         = UNSET;
 
     modssl_ctx_init_proxy(sc, p);
 
@@ -257,6 +258,7 @@
     cfgMergeBool(proxy_enabled);
     cfgMergeInt(session_cache_timeout);
     cfgMergeBool(cipher_server_pref);
+    cfgMergeBool(insecure_reneg);
 
     modssl_ctx_cfg_merge_proxy(base->proxy, add->proxy, mrg->proxy);
 
@@ -674,6 +676,19 @@
 #endif
 }
 
+const char *ssl_cmd_SSLInsecureRenegotiation(cmd_parms *cmd, void *dcfg, int flag)
+{
+#ifdef SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
+    SSLSrvConfigRec *sc = mySrvConfig(cmd->server);
+    sc->insecure_reneg = flag?TRUE:FALSE;
+    return NULL;
+#else
+    return "The SSLInsecureRenegotiation directive is not available "
+        "with this SSL library";
+#endif
+}
+
+
 static const char *ssl_cmd_check_dir(cmd_parms *parms,
                                      const char **dir)
 {
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/ssl_engine_init.c lenny-apache2/modules/ssl/ssl_engine_init.c
--- lenny-apache2~/modules/ssl/ssl_engine_init.c	2010-11-15 23:14:11.306955553 +0100
+++ lenny-apache2/modules/ssl/ssl_engine_init.c	2010-11-15 23:14:11.411204883 +0100
@@ -364,6 +364,7 @@
     MODSSL_SSL_METHOD_CONST SSL_METHOD *method = NULL;
     char *cp;
     int protocol = mctx->protocol;
+    SSLSrvConfigRec *sc = mySrvConfig(s);
 
     /*
      *  Create the new per-server SSL context
@@ -414,11 +415,14 @@
     }
 
 #ifdef SSL_OP_CIPHER_SERVER_PREFERENCE
-    {
-        SSLSrvConfigRec *sc = mySrvConfig(s);
-        if (sc->cipher_server_pref == TRUE) {
-            SSL_CTX_set_options(ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
-        }
+    if (sc->cipher_server_pref == TRUE) {
+        SSL_CTX_set_options(ctx, SSL_OP_CIPHER_SERVER_PREFERENCE);
+    }
+#endif
+
+#ifdef SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
+    if (sc->insecure_reneg == TRUE) {
+        SSL_CTX_set_options(ctx, SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION);
     }
 #endif
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/ssl_engine_kernel.c lenny-apache2/modules/ssl/ssl_engine_kernel.c
--- lenny-apache2~/modules/ssl/ssl_engine_kernel.c	2010-11-15 23:14:11.310953934 +0100
+++ lenny-apache2/modules/ssl/ssl_engine_kernel.c	2010-11-15 23:14:11.411204883 +0100
@@ -612,10 +612,18 @@
         else {
             request_rec *id = r->main ? r->main : r;
 
-            /* do a full renegotiation */
+            /* Perform a full renegotiation. */
             ap_log_error(APLOG_MARK, APLOG_DEBUG, 0, r->server,
-                         "Performing full renegotiation: "
-                         "complete handshake protocol");
+                         "Performing full renegotiation: complete handshake "
+                         "protocol (%s support secure renegotiation)",
+#if defined(SSL_get_secure_renegotiation_support)
+                         SSL_get_secure_renegotiation_support(ssl) ? 
+                         "client does" : "client does not"
+#else
+                         "server does not"
+#endif
+                );
+
 
             SSL_set_session_id_context(ssl,
                                        (unsigned char *)&id,
@@ -631,6 +639,7 @@
             if (SSL_get_state(ssl) != SSL_ST_OK) {
                 ap_log_error(APLOG_MARK, APLOG_ERR, 0, r->server,
                              "Re-negotiation request failed");
+                ssl_log_ssl_error(APLOG_MARK, APLOG_ERR, r->server);
 
                 r->connection->aborted = 1;
                 return HTTP_FORBIDDEN;
@@ -917,6 +926,7 @@
     "SSL_VERSION_INTERFACE",
     "SSL_VERSION_LIBRARY",
     "SSL_PROTOCOL",
+    "SSL_SECURE_RENEG",
     "SSL_COMPRESS_METHOD",
     "SSL_CIPHER",
     "SSL_CIPHER_EXPORT",
@@ -1061,6 +1071,12 @@
         }
     }
 
+
+#ifdef SSL_get_secure_renegotiation_support
+    apr_table_setn(r->notes, "ssl-secure-reneg", 
+                   SSL_get_secure_renegotiation_support(ssl) ? "1" : "0");
+#endif
+
     return DECLINED;
 }
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/ssl_engine_vars.c lenny-apache2/modules/ssl/ssl_engine_vars.c
--- lenny-apache2~/modules/ssl/ssl_engine_vars.c	2010-11-15 22:45:54.000000000 +0100
+++ lenny-apache2/modules/ssl/ssl_engine_vars.c	2010-11-15 23:18:12.226747522 +0100
@@ -320,6 +320,14 @@
     else if (ssl != NULL && strcEQ(var, "COMPRESS_METHOD")) {
         result = ssl_var_lookup_ssl_compress_meth(ssl);
     }
+    else if (ssl != NULL && strcEQ(var, "SECURE_RENEG")) {
+        int flag = 0;
+#ifdef SSL_get_secure_renegotiation_support
+        flag = SSL_get_secure_renegotiation_support(ssl);
+#endif
+        result = apr_pstrdup(p, flag ? "true" : "false");
+    }
+
     return result;
 }
 
diff -urNad '--exclude=CVS' '--exclude=.svn' '--exclude=.git' '--exclude=.arch' '--exclude=.hg' '--exclude=_darcs' '--exclude=.bzr' lenny-apache2~/modules/ssl/ssl_private.h lenny-apache2/modules/ssl/ssl_private.h
--- lenny-apache2~/modules/ssl/ssl_private.h	2010-11-15 23:14:11.310953934 +0100
+++ lenny-apache2/modules/ssl/ssl_private.h	2010-11-15 23:14:11.411204883 +0100
@@ -460,6 +460,7 @@
     int              vhost_id_len;
     int              session_cache_timeout;
     BOOL             cipher_server_pref;
+    BOOL             insecure_reneg;
     modssl_ctx_t    *server;
     modssl_ctx_t    *proxy;
 };
@@ -526,6 +527,7 @@
 const char  *ssl_cmd_SSLRequireSSL(cmd_parms *, void *);
 const char  *ssl_cmd_SSLRequire(cmd_parms *, void *, const char *);
 const char  *ssl_cmd_SSLUserName(cmd_parms *, void *, const char *);
+const char  *ssl_cmd_SSLInsecureRenegotiation(cmd_parms *cmd, void *dcfg, int flag);
 
 const char  *ssl_cmd_SSLProxyEngine(cmd_parms *cmd, void *dcfg, int flag);
 const char  *ssl_cmd_SSLProxyProtocol(cmd_parms *, void *, const char *);
